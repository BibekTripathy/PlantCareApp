# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      # with:
      #  version: 6.6.3
      #  host: ${{ runner.os }}
      #  tools: 'tools_cmake'

    - name: Install SQLite3 (Linux)
      if: runner.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev

    - name: Install SQLite3 (Windows)
      if: runner.os == 'windows'
      run: |
        # On Windows, we'll use vcpkg to install SQLite3
        git clone https://github.com/Microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
        ./vcpkg/vcpkg install sqlite3:x64-windows
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: Configure CMake
      shell: bash
      run: |
        # Common CMake arguments
        cmake_args=(
          -B "${{ steps.strings.outputs.build-output-dir }}"
          -DCMAKE_CXX_COMPILER="${{ matrix.cpp_compiler }}"
          -DCMAKE_C_COMPILER="${{ matrix.c_compiler }}"
          -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}"
        )
        
        # Windows-specific arguments
        if [[ "${{ runner.os }}" == "windows" ]]; then
          cmake_args+=(
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
            -DVCPKG_TARGET_TRIPLET=x64-windows
          )
        fi
        #if [[ "${{ matrix.c_compiler }}" == "cl" ]]; then
        #  cmake_args+=(
        #    -DCMAKE_CXX_FLAGS="/W4 /WX"
        #  )
        #else
        #  # Linux-specific arguments
        #  cmake_args+=(
        #    -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Werror"
        #  )
        #fi
        
        cmake_args+=(
          -S "${{ github.workspace }}"
        )
        
        echo "CMake arguments: ${cmake_args[@]}"
        cmake "${cmake_args[@]}"

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
